{
  "version": 3,
  "file": "install-app-deps.js",
  "sourceRoot": "",
  "sources": [
    "../../src/cli/install-app-deps.ts"
  ],
  "names": [],
  "mappings": ";;;;;;;;;;;;;;;oEASA,AAAK;AACH,cAAM,AAAI,yCACP,AAAM,OAAC,AAAU;AAChB,AAAO,qBAAE,CAAC,AAAO,SAAE,AAAQ,UAAE,AAAO,AAAC;AACrC,AAAO,qBAAE,AAAO,QAAC,AAAQ,AAC1B,AAAC;AAHkB,SADJ,AAAK,EAKpB,AAAM,OAAC,AAAM;AACZ,AAAO,qBAAE,CAAC,AAAM,QAAE,AAAK,OAAE,AAAK,AAAC;AAC/B,AAAO,qBAAE,AAAO,QAAC,AAAI,AACtB,AAAC;AAHc,WAIf,AAAI;AAEP,cAAM,AAAU,aAAG,AAAO,QAAC,AAAG,AAAE;AAChC,cAAM,AAAM,SAAG,CAAC,MAAM,AAAU,8DAAC,AAAU,AAAC,AAAC,gBAAI,AAAE;AACnD,cAAM,AAAW,cAAG,AAAM,OAAC,AAAW;AACtC,cAAM,AAAO,UAAG,MAAM,AAAe,gDAAC,AAAG,2FACZ,AAAU,2EAAM,AAAM,OAAC,AAAW;AAAE,AAAE,mBAAI,AAAG,GAAC,AAAG,AAAC,AAAC;SAAvC,AAAG,CAA1C,AAA0B,CADsB,EAEhD,AAAW,eAAI,AAAI,OAAG,AAAkB,sEAAC,AAAM,QAAE,AAAU,AAAC,cAAG,AAAe,gDAAC,AAAO,QAAC,AAAW,AAAC,AACpG,AAAC;AAEF,AAAsG;AACtG,cAAM,AAAgB,8CAAC,AAAM,QAAE,AAAO,QAAC,AAAC,AAAC,IAAE,EAAC,AAAO,SAAE,AAAO,QAAC,AAAC,AAAC,IAAE,AAAa,eAAE,AAAW,eAAI,AAAI,AAAC,QAAE,AAAI,KAAC,AAAQ,UAAE,AAAI,KAAC,AAAI,MAAE,AAAO,QAAC,AAAC,AAAC,OAAK,AAAU,AAAC,AAC5J;AAAC;;;;;;;;;AA5BD,AAAO,AAAE,AAA0B,AAAE,AAAG,AAAE,AAAM,AAAuB;;;;;;AACvE,AAAO,AAAE,AAAiB,AAAE,AAAM,AAAmC;;;;;;AACrE,AAAO,AAAK,AAAM,AAAO;;;;;;AACzB,AAAO,AAAE,AAAkB,AAAE,AAAU,AAAE,AAAM,AAAyB;;;;;;AACxE,AAAO,AAAE,AAAgB,AAAE,AAAM,AAAS;;;;;;AA0B1C,AAAI,AAAE,OACH,AAAK,AAAC,AAAiB,AAAC",
  "sourcesContent": [
    "#! /usr/bin/env node\n\nimport BluebirdPromise from \"bluebird-lst\"\nimport { computeDefaultAppDirectory, use } from \"electron-builder-util\"\nimport { printErrorAndExit } from \"electron-builder-util/out/promise\"\nimport yargs from \"yargs\"\nimport { getElectronVersion, loadConfig } from \"../util/readPackageJson\"\nimport { installOrRebuild } from \"../yarn\"\n\nasync function main() {\n  const args: any = yargs\n    .option(\"platform\", {\n      choices: [\"linux\", \"darwin\", \"win32\"],\n      default: process.platform,\n    })\n    .option(\"arch\", {\n      choices: [\"ia32\", \"x64\", \"all\"],\n      default: process.arch,\n    })\n    .argv\n\n  const projectDir = process.cwd()\n  const config = (await loadConfig(projectDir)) || {}\n  const muonVersion = config.muonVersion\n  const results = await BluebirdPromise.all<string>([\n    computeDefaultAppDirectory(projectDir, use(config.directories, it => it!.app)),\n    muonVersion == null ? getElectronVersion(config, projectDir) : BluebirdPromise.resolve(muonVersion),\n  ])\n\n  // if two package.json â€” force full install (user wants to install/update app deps in addition to dev)\n  await installOrRebuild(config, results[0], {version: results[1], useCustomDist: muonVersion == null}, args.platform, args.arch, results[0] !== projectDir)\n}\n\nmain()\n  .catch(printErrorAndExit)"
  ]
}
